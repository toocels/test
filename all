import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

// CLIENT CLIENT CLIENT CLIENT CLIENT CLIENT CLIENT

public class Client {

	static ObjectOutputStream output;
	static ObjectInputStream input;
	static String msg;
	static String serverIP = "";
	static Socket socket;
	static int port = 8888;

	static JLabel l;
	static JTextField tf;

	public static void main(String args[]) {
		System.out.println("Wassuppp");

		createFrame();

		try {
			socket = new Socket(InetAddress.getByName("127.0.0.1"), port);
			output = new ObjectOutputStream(socket.getOutputStream());
			output.flush();
			input = new ObjectInputStream(socket.getInputStream());
		} catch (Exception e) {System.out.println(e);}
		System.out.println("Conencted!");

		tf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					output.writeObject(tf.getText());
					output.flush();
				} catch (Exception ex) {System.out.println(ex);}
				tf.setText("");
			}
		});

		while (true) {
			try {
				msg = (String)input.readObject();
				System.out.println(msg);
			} catch (Exception e) {System.out.println(e);}
		}
	}

	static void createFrame() {
		JFrame f = new JFrame();
		JPanel p = new JPanel();
		l = new JLabel("A label");
		tf = new JTextField("An area");

		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(400, 500);

		p.add(l);
		p.add(tf);
		f.add(p);

		f.setTitle("Chattt");
		f.setVisible(true);
	}
}

import java.io.*;

class Main {
	public static void main(String args[]) {
		try {
			FileWriter myWriter = new FileWriter("filename.txt");
			myWriter.write("Files in Java might be tricky, bddut it is fun enough!");
			myWriter.close();

			FileReader fileReader = new FileReader("filename.txt");
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			String line;
			while ((line = bufferedReader.readLine()) != null)
				System.out.println(line);
		} catch (Exception e) {}
	}
}import java.rmi.*;

public class MyClient {
	public static void main(String[] args) {
		try {
			MyServerIntf servImp = (MyServerIntf) Naming.lookup("rmi://localhost/servImp");
			System.out.println("Addition: " + servImp.add(2000, 500));
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
	}
}
import java.rmi.*;                   // Import RMI classes for remote method invocation.
import java.rmi.server.*;            // Import RMI server classes for creating remote objects.

public class MyServer {
	public static void main(String[] args) {
		try {
			MyServerImpl servImp = new MyServerImpl();
			Naming.rebind("servImp", servImp);
			System.out.println("Server Started...");
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
	}
}

class MyServerImpl extends UnicastRemoteObject implements MyServerIntf {
	MyServerImpl() throws RemoteException {	}

	public double add(double a, double b) throws RemoteException {
		return a + b;
	}
}

interface MyServerIntf extends Remote {
	double add(double a, double b) throws RemoteException;
}
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

// SERVER SERVER SERVER SERVER SERVER SERVER SERVER

public class Server {

	static ObjectOutputStream output;
	static ObjectInputStream input;
	static String msg;
	static String serverIP;
	static Socket socket;
	static ServerSocket server;
	static int port = 8888;

	static JLabel l;
	static JTextField tf;

	public static void main(String args[]) {
		System.out.println("Wassuppp");

		createFrame();

		tf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					output.writeObject(tf.getText());
					output.flush();
				} catch (Exception ed) {System.out.println(ed);}
				tf.setText("");
			}
		});

		try {
			server = new ServerSocket(port, 50);
			System.out.println("Waiting for connection");
			while (true)
				try {
					socket = server.accept();		//estfblishes connection and waits for the client
					System.out.println("Now Connected to " + socket.getInetAddress().getHostName());

					output = new ObjectOutputStream(socket.getOutputStream());
					output.flush();
					input = new ObjectInputStream(socket.getInputStream());

					while (true) {
						msg = (String)input.readObject();
						System.out.println(msg);
					}
				} catch (Exception e) {System.out.println(e);}
		} catch (IOException e) {System.out.println(e);}
	}

	static void createFrame() {
		JFrame f = new JFrame();
		JPanel p = new JPanel();
		l = new JLabel("A label");
		tf = new JTextField("An area");

		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(400, 500);

		p.add(l);
		p.add(tf);
		f.add(p);

		f.setTitle("Chattt");
		f.setVisible(true);
	}
}
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

// CLIENT CLIENT CLIENT CLIENT CLIENT CLIENT CLIENT

public class Client {

	static ObjectOutputStream output;
	static ObjectInputStream input;
	static String msg;
	static String serverIP = "";
	static Socket socket;
	static int port = 8888;

	static JLabel l;
	static JTextField tf;

	public static void main(String args[]) {
		System.out.println("Wassuppp");

		createFrame();

		try {
			socket = new Socket(InetAddress.getByName("127.0.0.1"), port);
			output = new ObjectOutputStream(socket.getOutputStream());
			output.flush();
			input = new ObjectInputStream(socket.getInputStream());
		} catch (Exception e) {System.out.println(e);}
		System.out.println("Conencted!");

		tf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					output.writeObject(tf.getText());
					output.flush();
				} catch (Exception ex) {System.out.println(ex);}
				tf.setText("");
			}
		});

		while (true) {
			try {
				msg = (String)input.readObject();
				System.out.println(msg);
			} catch (Exception e) {System.out.println(e);}
		}
	}

	static void createFrame() {
		JFrame f = new JFrame();
		JPanel p = new JPanel();
		l = new JLabel("A label");
		tf = new JTextField("An area");

		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(400, 500);

		p.add(l);
		p.add(tf);
		f.add(p);

		f.setTitle("Chattt");
		f.setVisible(true);
	}
}

import java.io.*;

class Main {
	public static void main(String args[]) {
		try {
			FileWriter myWriter = new FileWriter("filename.txt");
			myWriter.write("Files in Java might be tricky, bddut it is fun enough!");
			myWriter.close();

			FileReader fileReader = new FileReader("filename.txt");
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			String line;
			while ((line = bufferedReader.readLine()) != null)
				System.out.println(line);
		} catch (Exception e) {}
	}
}import java.rmi.*;

public class MyClient {
	public static void main(String[] args) {
		try {
			MyServerIntf servImp = (MyServerIntf) Naming.lookup("rmi://localhost/servImp");
			System.out.println("Addition: " + servImp.add(2000, 500));
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
	}
}
import java.rmi.*;                   // Import RMI classes for remote method invocation.
import java.rmi.server.*;            // Import RMI server classes for creating remote objects.

public class MyServer {
	public static void main(String[] args) {
		try {
			MyServerImpl servImp = new MyServerImpl();
			Naming.rebind("servImp", servImp);
			System.out.println("Server Started...");
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
	}
}

class MyServerImpl extends UnicastRemoteObject implements MyServerIntf {
	MyServerImpl() throws RemoteException {	}

	public double add(double a, double b) throws RemoteException {
		return a + b;
	}
}

interface MyServerIntf extends Remote {
	double add(double a, double b) throws RemoteException;
}
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

// SERVER SERVER SERVER SERVER SERVER SERVER SERVER

public class Server {

	static ObjectOutputStream output;
	static ObjectInputStream input;
	static String msg;
	static String serverIP;
	static Socket socket;
	static ServerSocket server;
	static int port = 8888;

	static JLabel l;
	static JTextField tf;

	public static void main(String args[]) {
		System.out.println("Wassuppp");

		createFrame();

		tf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					output.writeObject(tf.getText());
					output.flush();
				} catch (Exception ed) {System.out.println(ed);}
				tf.setText("");
			}
		});

		try {
			server = new ServerSocket(port, 50);
			System.out.println("Waiting for connection");
			while (true)
				try {
					socket = server.accept();		//estfblishes connection and waits for the client
					System.out.println("Now Connected to " + socket.getInetAddress().getHostName());

					output = new ObjectOutputStream(socket.getOutputStream());
					output.flush();
					input = new ObjectInputStream(socket.getInputStream());

					while (true) {
						msg = (String)input.readObject();
						System.out.println(msg);
					}
				} catch (Exception e) {System.out.println(e);}
		} catch (IOException e) {System.out.println(e);}
	}

	static void createFrame() {
		JFrame f = new JFrame();
		JPanel p = new JPanel();
		l = new JLabel("A label");
		tf = new JTextField("An area");

		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(400, 500);

		p.add(l);
		p.add(tf);
		f.add(p);

		f.setTitle("Chattt");
		f.setVisible(true);
	}
}
Files in Java might be tricky, bddut it is fun enough!#Create a simulator objectset
ns [new Simulator]

#Create a trace file, this file is for logging purpose
set tracefile [open wired.tr w]
$ns trace-all $tracefile

#Create a animation infomration or NAM file creationset
namfile [open wired.nam w]
$ns namtrace-all $namfile

#Create nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]


set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]

#Creation of link between nodes with DropTail Queue
#Droptail means Dropping the tail.
$ns duplex-link $n0 $n2 5Mb 2ms DropTail
$ns duplex-link $n1 $n2 10Mb 5ms DropTail
$ns duplex-link $n2 $n3 4Mb 3ms DropTail
$ns duplex-link $n3 $n4 100Mb 2ms DropTail
$ns duplex-link $n3 $n5 15Mb 4ms DropTail

#Creation of Agents
#Node 0 to Node 4
set udp [new Agent/UDP]
set null [new Agent/Null]
$ns attach-agent $n0 $udp
$ns attach-agent $n4 $null
$ns connect $udp $null

#Creation of TCP Agent
set tcp [new Agent/TCP]
set sink [new Agent/TCPSink]
$ns attach-agent $n1 $tcp
$ns attach-agent $n5 $sink
$ns connect $tcp $sink

#Creation of Application CBR, FTP
#CBR - Constant Bit Rate (Example mp3 files that have a CBR or 192kbps, 320kbps, etc.)
#FTP - File Transfer Protocol (Ex: To download a file from a network)

set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp

set ftp [new Application/FTP]
$ftp attach-agent $tcp

#Start the traffic
$ns at 1.0 "$cbr start"
$ns at 2.0 "$ftp start"

$ns at 10.0 "finish"

#The following procedure will be called at 10.0 seconds
proc finish {} {
	global ns tracefile namfile
	$ns flush-trace
	close $tracefile
	close $namfile
	exit 0
}

puts "Simulation is starting..."
$ns run#Initialize the variables
set val(chan) Channel/WirelessChannel ;#Channel Type
set val(prop) Propagation/TwoRayGround ;# radio-propagation model
set val(netif) Phy/WirelessPhy ;# network interface type WAVELAN DSSS 2.4GHz
set val(mac) Mac/802_11 ;# MAC type
set val(ifq) Queue/DropTail/PriQueue ;# interface queue type
set val(ll) LL ;# link layer type
set val(ant) Antenna/OmniAntenna ;# antenna model
set val(ifqlen) 50 ;# max packet in ifq
set val(nn) 6 ;# number of mobilenodes
set val(rp) AODV ;# routing protocol
set val(x) 500 ;# in metresset
set val(y) 500 ;# in metres
#Adhoc OnDemand Distance Vector

#Creation of Simulator
set ns [new Simulator]

#Creation of Trace and namefile
set tracefile [open wireless.tr w]
$ns trace-all $tracefile

#Creation of Network Animation file
set namfile [open wireless.nam w]
$ns namtrace-all-wireless $namfile $val(x) $val(y)

#Create Topography
set topo [new Topography]
$topo load_flatgrid $val(x) $val(y)

#GOD Creation - General Operations Director
create-god $val(nn)

set channel1 [new $val(chan)]
set channel2 [new $val(chan)]
set channel3 [new $val(chan)]

#Configure the Node
$ns node-config -adhocRouting $val(rp) \
-llType $val(ll) \
-macType $val(mac) \
-ifqType $val(ifq) \
-ifqLen $val(ifqlen) \
-antType $val(ant) \
-propType $val(prop) \

-phyType $val(netif) \
-topoInstance $topo \
-agentTrace ON \
-macTrace ON \
-routerTrace ON \
-movementTrace ON \
-channel $channel1

set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]

$n0 random-motion 0
$n1 random-motion 0
$n2 random-motion 0
$n3 random-motion 0
$n4 random-motion 0
$n5 random-motion 0

$ns initial_node_pos $n0 20
$ns initial_node_pos $n1 20
$ns initial_node_pos $n2 20
$ns initial_node_pos $n3 20
$ns initial_node_pos $n4 20
$ns initial_node_pos $n5 50

#Initial coordinates of the nodes

$n0 set X_ 10.0
$n0 set Y_ 20.0
$n0 set Z_ 0.0

$n1 set X_ 210.0
$n1 set Y_ 230.0
$n1 set Z_ 0.0

$n2 set X_ 100.0
$n2 set Y_ 200.0
$n2 set Z_ 0.0

$n3 set X_ 150.0
$n3 set Y_ 230.0
$n3 set Z_ 0.0

$n4 set X_ 430.0
$n4 set Y_ 320.0
$n4 set Z_ 0.0

$n5 set X_ 270.0
$n5 set Y_ 120.0
$n5 set Z_ 0.0
#Dont mention any values above than 500 because in this example, we use X and Y as 500,500

#Mobility of the nodes
#At what Time? Which node? Where to? at What Speed?
$ns at 1.0 "$n1 setdest 490.0 340.0 25.0"
$ns at 1.0 "$n4 setdest 300.0 130.0 5.0"
$ns at 1.0 "$n5 setdest 190.0 440.0 15.0"

#The nodes can move any number of times at any location during the simulation (runtime)
$ns at 20.0 "$n5 setdest 100.0 200.0 30.0"

#Creation of agents
set tcp [new Agent/TCP]
set sink [new Agent/TCPSink]
$ns attach-agent $n0 $tcp
$ns attach-agent $n5 $sink
$ns connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns at 1.0 "$ftp start"

set udp [new Agent/UDP]
set null [new Agent/Null]
$ns attach-agent $n2 $udp
$ns attach-agent $n3 $null
$ns connect $udp $null
set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$ns at 1.0 "$cbr start"

$ns at 30.0 "finish"

proc finish {} {
global ns tracefile namfile
$ns flush-trace
close $tracefile
close $namfile
exit 0

}

puts "Starting Simulation"
$ns runFiles in Java might be tricky, bddut it is fun enough!#Create a simulator objectset
ns [new Simulator]

#Create a trace file, this file is for logging purpose
set tracefile [open wired.tr w]
$ns trace-all $tracefile

#Create a animation infomration or NAM file creationset
namfile [open wired.nam w]
$ns namtrace-all $namfile

#Create nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]


set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]

#Creation of link between nodes with DropTail Queue
#Droptail means Dropping the tail.
$ns duplex-link $n0 $n2 5Mb 2ms DropTail
$ns duplex-link $n1 $n2 10Mb 5ms DropTail
$ns duplex-link $n2 $n3 4Mb 3ms DropTail
$ns duplex-link $n3 $n4 100Mb 2ms DropTail
$ns duplex-link $n3 $n5 15Mb 4ms DropTail

#Creation of Agents
#Node 0 to Node 4
set udp [new Agent/UDP]
set null [new Agent/Null]
$ns attach-agent $n0 $udp
$ns attach-agent $n4 $null
$ns connect $udp $null

#Creation of TCP Agent
set tcp [new Agent/TCP]
set sink [new Agent/TCPSink]
$ns attach-agent $n1 $tcp
$ns attach-agent $n5 $sink
$ns connect $tcp $sink

#Creation of Application CBR, FTP
#CBR - Constant Bit Rate (Example mp3 files that have a CBR or 192kbps, 320kbps, etc.)
#FTP - File Transfer Protocol (Ex: To download a file from a network)

set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp

set ftp [new Application/FTP]
$ftp attach-agent $tcp

#Start the traffic
$ns at 1.0 "$cbr start"
$ns at 2.0 "$ftp start"

$ns at 10.0 "finish"

#The following procedure will be called at 10.0 seconds
proc finish {} {
	global ns tracefile namfile
	$ns flush-trace
	close $tracefile
	close $namfile
	exit 0
}

puts "Simulation is starting..."
$ns run#Initialize the variables
set val(chan) Channel/WirelessChannel ;#Channel Type
set val(prop) Propagation/TwoRayGround ;# radio-propagation model
set val(netif) Phy/WirelessPhy ;# network interface type WAVELAN DSSS 2.4GHz
set val(mac) Mac/802_11 ;# MAC type
set val(ifq) Queue/DropTail/PriQueue ;# interface queue type
set val(ll) LL ;# link layer type
set val(ant) Antenna/OmniAntenna ;# antenna model
set val(ifqlen) 50 ;# max packet in ifq
set val(nn) 6 ;# number of mobilenodes
set val(rp) AODV ;# routing protocol
set val(x) 500 ;# in metresset
set val(y) 500 ;# in metres
#Adhoc OnDemand Distance Vector

#Creation of Simulator
set ns [new Simulator]

#Creation of Trace and namefile
set tracefile [open wireless.tr w]
$ns trace-all $tracefile

#Creation of Network Animation file
set namfile [open wireless.nam w]
$ns namtrace-all-wireless $namfile $val(x) $val(y)

#Create Topography
set topo [new Topography]
$topo load_flatgrid $val(x) $val(y)

#GOD Creation - General Operations Director
create-god $val(nn)

set channel1 [new $val(chan)]
set channel2 [new $val(chan)]
set channel3 [new $val(chan)]

#Configure the Node
$ns node-config -adhocRouting $val(rp) \
-llType $val(ll) \
-macType $val(mac) \
-ifqType $val(ifq) \
-ifqLen $val(ifqlen) \
-antType $val(ant) \
-propType $val(prop) \

-phyType $val(netif) \
-topoInstance $topo \
-agentTrace ON \
-macTrace ON \
-routerTrace ON \
-movementTrace ON \
-channel $channel1

set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]

$n0 random-motion 0
$n1 random-motion 0
$n2 random-motion 0
$n3 random-motion 0
$n4 random-motion 0
$n5 random-motion 0

$ns initial_node_pos $n0 20
$ns initial_node_pos $n1 20
$ns initial_node_pos $n2 20
$ns initial_node_pos $n3 20
$ns initial_node_pos $n4 20
$ns initial_node_pos $n5 50

#Initial coordinates of the nodes

$n0 set X_ 10.0
$n0 set Y_ 20.0
$n0 set Z_ 0.0

$n1 set X_ 210.0
$n1 set Y_ 230.0
$n1 set Z_ 0.0

$n2 set X_ 100.0
$n2 set Y_ 200.0
$n2 set Z_ 0.0

$n3 set X_ 150.0
$n3 set Y_ 230.0
$n3 set Z_ 0.0

$n4 set X_ 430.0
$n4 set Y_ 320.0
$n4 set Z_ 0.0

$n5 set X_ 270.0
$n5 set Y_ 120.0
$n5 set Z_ 0.0
#Dont mention any values above than 500 because in this example, we use X and Y as 500,500

#Mobility of the nodes
#At what Time? Which node? Where to? at What Speed?
$ns at 1.0 "$n1 setdest 490.0 340.0 25.0"
$ns at 1.0 "$n4 setdest 300.0 130.0 5.0"
$ns at 1.0 "$n5 setdest 190.0 440.0 15.0"

#The nodes can move any number of times at any location during the simulation (runtime)
$ns at 20.0 "$n5 setdest 100.0 200.0 30.0"

#Creation of agents
set tcp [new Agent/TCP]
set sink [new Agent/TCPSink]
$ns attach-agent $n0 $tcp
$ns attach-agent $n5 $sink
$ns connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns at 1.0 "$ftp start"

set udp [new Agent/UDP]
set null [new Agent/Null]
$ns attach-agent $n2 $udp
$ns attach-agent $n3 $null
$ns connect $udp $null
set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$ns at 1.0 "$cbr start"

$ns at 30.0 "finish"

proc finish {} {
global ns tracefile namfile
$ns flush-trace
close $tracefile
close $namfile
exit 0

}

puts "Starting Simulation"
$ns run